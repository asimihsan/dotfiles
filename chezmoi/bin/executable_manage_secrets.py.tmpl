#!/usr/bin/env python3

import os
import subprocess
import sys
import time
import hashlib
import shlex
from pathlib import Path
import json
from typing import Dict, Optional, List, Tuple # Added for type hints

# --- Configuration Constants ---

# Path to the encrypted cache file
CACHE_FILE: Path = Path.home() / ".cache/zsh_secrets.env.age"

# Path in 1Password for the age private key
AGE_KEY_OP_PATH: str = "op://Private/ZSHRC_SECRETS_CACHE_AGE_KEY/password"

# The age public key corresponding to the private key above
AGE_PUBLIC_KEY: str = "age1tp0n7wndx263jd953rf4prqlmdyu98q2cjj5g5anju7px0wlaevqzvzt92"

# Cache validity duration in seconds (e.g., 86400 for 1 day)
CACHE_TTL: int = 86400

# Define the secrets to cache: "op://path/to/secret/field": "ENV_VAR_NAME"
SECRETS_TO_CACHE: Dict[str, str] = {
    "op://Private/GOOGLE_AI_STUDIO_API_KEY/password": "GEMINI_API_KEY",
{{- if eq .chezmoi.hostname "hlru5i" }}
    "op://Private/D2 API token/credential": "TSTRUCT_TOKEN",
    "op://Private/Personal LocalStack token/password": "LOCALSTACK_AUTH_TOKEN",
    "op://Private/OpenAI API key work/password": "OPENAI_API_KEY",
    "op://Private/Anthropic API key/credential": "ANTHROPIC_API_KEY",
    "op://Private/Bing search API key/password": "BING_SEARCH_API_KEY",
    "op://Private/Claude MCP server GitHub Personal Access Token/token": "GITHUB_PERSONAL_ACCESS_TOKEN",
    "op://Private/DEEPSEEK_API_KEY/password": "DEEPSEEK_API_KEY",
{{ else if eq .chezmoi.hostname "yov3bc" "okzf68" -}}
    "op://Private/OpenAI API key work/password": "OPENAI_API_KEY",
    "op://Private/Level Anthropic API key/password": "ANTHROPIC_API_KEY",
    "op://Private/SumoLogic Level/Access ID": "SUMOLOGIC_ACCESS_ID",
    "op://Private/SumoLogic Level/Access Key": "SUMOLOGIC_ACCESS_KEY",
    "op://Private/Notion API key for Level workspace/credential": "NOTION_KEY",
    "op://Private/Linear API key/password": "LINEAR_API_KEY",
    "op://Private/Iterable Level/password": "ITERABLE_API_KEY",
    "op://Private/LocalStack Level/Auth Token": "LOCALSTACK_AUTH_TOKEN",
{{ end -}}
}

# --- Helper Functions ---

def log(message: str) -> None:
    """Prints a message to stderr."""
    print(f"manage_secrets.py: {message}", file=sys.stderr)

def run_command(
    cmd_list: List[str],
    check: bool = True,
    capture_output: bool = True,
    text: bool = True,
    input_data: Optional[str] = None
) -> subprocess.CompletedProcess:
    """Runs a command and returns the CompletedProcess object."""
    log(f"Running command: {' '.join(shlex.quote(str(arg)) for arg in cmd_list)}")
    try:
        process = subprocess.run(
            cmd_list,
            check=check,
            capture_output=capture_output,
            text=text,
            input=input_data,
            encoding='utf-8' # Explicitly set encoding
        )
        return process
    except FileNotFoundError:
        log(f"Error: Command not found: {cmd_list[0]}")
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        # Log stderr if available and useful
        stderr_output = f" Stderr: {e.stderr.strip()}" if e.stderr else ""
        log(f"Error running command (exit code {e.returncode}): {' '.join(map(shlex.quote, cmd_list))}{stderr_output}")
        sys.exit(1)
    except Exception as e: # Catch other potential errors
        log(f"Unexpected error running command {' '.join(map(shlex.quote, cmd_list))}: {e}")
        sys.exit(1)


def get_age_private_key() -> str:
    """Fetches the age private key from 1Password."""
    log("Fetching age private key from 1Password...")
    result = run_command(["op", "read", AGE_KEY_OP_PATH])
    key = result.stdout.strip()
    if not key:
        log("Error: Failed to retrieve age private key from 1Password (empty result).")
        sys.exit(1)
    return key

def calculate_secrets_hash(secrets_dict: Dict[str, str]) -> str:
    """Calculates a consistent SHA256 hash of the secrets dictionary."""
    # Sort the dictionary by key for consistent hashing
    sorted_secrets_string = json.dumps(secrets_dict, sort_keys=True)
    hasher = hashlib.sha256()
    hasher.update(sorted_secrets_string.encode('utf-8'))
    return hasher.hexdigest()

def decrypt_cache(cache_path: Path, age_private_key: str) -> Optional[str]:
    """Decrypts the cache file using age and returns the content, or None on failure."""
    log(f"Decrypting cache file: {cache_path}")
    try:
        # Pass the cache_path as the final argument (INPUT)
        result = run_command(
            ["age", "-d", "-i", "-", str(cache_path)],
            input_data=age_private_key,
            check=True # Will raise CalledProcessError on failure
        )
        return result.stdout
    except subprocess.CalledProcessError as e:
        # Log specific decryption error, but don't exit here
        stderr_output = f" Stderr: {e.stderr.strip()}" if e.stderr else ""
        log(f"Failed to decrypt cache (exit code {e.returncode}): {cache_path}{stderr_output}")
        return None # Indicate failure

def refresh_cache(cache_path: Path, secrets_dict: Dict[str, str], age_public_key: str) -> None:
    """Fetches secrets, calculates hash, formats, encrypts, and writes cache."""
    log("Refreshing secrets cache...")
    current_hash = calculate_secrets_hash(secrets_dict)
    log(f"Current secrets definition hash: {current_hash}")

    export_lines: List[str] = [f"# HASH:{current_hash}"]

    for op_path, env_var_name in secrets_dict.items():
        log(f"Fetching {env_var_name} from {op_path}...")
        result = run_command(["op", "read", op_path])
        secret_value = result.stdout.strip()
        # Log warning for empty secrets but still include them (shell handles empty vars)
        if not secret_value:
            log(f"Warning: Fetched empty value for {env_var_name} from {op_path}")

        # Use shlex.quote for robust shell quoting
        export_lines.append(f"export {env_var_name}={shlex.quote(secret_value)}")

    content_to_encrypt: str = "\n".join(export_lines) + "\n"

    log(f"Encrypting secrets to {cache_path}...")
    cache_path.parent.mkdir(parents=True, exist_ok=True)
    try:
        run_command(
            ["age", "-r", age_public_key, "-o", str(cache_path)],
            input_data=content_to_encrypt,
            check=True,
            capture_output=False # Don't capture age encrypt stdout
        )
        cache_path.chmod(0o600) # Set restrictive permissions
        log("Cache refreshed successfully.")
    except Exception as e: # Catch potential errors during write/encrypt
        log(f"Error during encryption/writing cache: {e}")
        # Clean up potentially partial cache file on error
        if cache_path.exists():
            try:
                cache_path.unlink()
                log(f"Removed potentially corrupt cache file: {cache_path}")
            except OSError as unlink_e:
                log(f"Error removing partial cache file {cache_path}: {unlink_e}")
        sys.exit(1)

def check_cache_validity(cache_path: Path, expected_hash: str) -> Tuple[bool, Optional[str]]:
    """
    Checks if the cache exists, is decryptable, has matching hash, and is within TTL.
    Returns (is_valid, decrypted_content or None).
    """
    if not cache_path.exists():
        log(f"Cache file {cache_path} not found.")
        return False, None

    log("Cache file found. Checking hash and TTL...")
    age_private_key = get_age_private_key()
    decrypted_content = decrypt_cache(cache_path, age_private_key)

    if decrypted_content is None:
        log("Decryption failed. Assuming cache is corrupt or key changed.")
        return False, None # Treat decryption failure as invalid

    lines = decrypted_content.splitlines()
    stored_hash = ""
    if lines and lines[0].startswith("# HASH:"):
        stored_hash = lines[0][len("# HASH:"):]
    else:
        log("Warning: Cache file does not contain expected hash line.")
        # Treat missing hash as invalid
        return False, decrypted_content # Return content in case caller wants it despite hash issue

    log(f"Stored secrets hash: {stored_hash}")
    if expected_hash != stored_hash:
        log("Secrets definition hash mismatch.")
        return False, decrypted_content # Invalid due to hash mismatch

    # Hashes match, check TTL
    log("Secrets definition hash matches. Checking cache TTL...")
    try:
        cache_mtime = cache_path.stat().st_mtime
        cache_age = time.time() - cache_mtime
        if cache_age > CACHE_TTL:
            log(f"Cache is older than TTL ({CACHE_TTL} seconds).")
            return False, decrypted_content # Invalid due to TTL expiry
        else:
            log("Cache is valid and up-to-date.")
            return True, decrypted_content # Cache is valid
    except OSError as e:
        log(f"Error checking cache file stat: {e}. Treating as invalid.")
        return False, decrypted_content # Invalid due to stat error

# --- Main Execution ---

def main() -> None:
    """Main logic for managing the secrets cache."""
    # Check for force refresh first
    if os.environ.get("FORCE_SECRET_REFRESH") == "1":
        log("FORCE_SECRET_REFRESH is set. Forcing cache refresh.")
        refresh_cache(CACHE_FILE, SECRETS_TO_CACHE, AGE_PUBLIC_KEY)
        # Fall through to load the newly refreshed cache

    current_hash = calculate_secrets_hash(SECRETS_TO_CACHE)
    log(f"Expected secrets hash: {current_hash}")

    is_valid, decrypted_content = check_cache_validity(CACHE_FILE, current_hash)

    if not is_valid:
        log("Cache is invalid or needs refresh.")
        refresh_cache(CACHE_FILE, SECRETS_TO_CACHE, AGE_PUBLIC_KEY)
        log("Reloading secrets from newly refreshed cache...")
        # Re-fetch key in case op session expired during a long refresh
        age_private_key = get_age_private_key()
        decrypted_content = decrypt_cache(CACHE_FILE, age_private_key)

        if decrypted_content is None:
            log("FATAL: Failed to decrypt cache even after refreshing. Check permissions and age key.")
            sys.exit(1)

        # Optional: Sanity check hash immediately after refresh
        lines = decrypted_content.splitlines()
        stored_hash_after_refresh = ""
        if lines and lines[0].startswith("# HASH:"):
            stored_hash_after_refresh = lines[0][len("# HASH:"):]
        if current_hash != stored_hash_after_refresh:
             log("WARNING: Hash mismatch immediately after refresh. This should not happen.")
             # Consider exiting if this is critical: sys.exit(1)

    # --- Output ---
    if not decrypted_content:
         log("Error: No valid secret content available to output, even after potential refresh.")
         sys.exit(1)

    log("Outputting export commands...")
    lines = decrypted_content.splitlines()
    # Print everything *after* the hash line
    if lines and lines[0].startswith("# HASH:"):
        # Ensure final newline for shell eval
        print("\n".join(lines[1:]), end='\n' if lines[1:] else '')
        log("Secrets ready for evaluation.")
    else:
        # This case should be rare after the checks/refresh logic
        log("Error: Decrypted content missing hash line, cannot reliably output secrets.")
        sys.exit(1)


if __name__ == "__main__":
    # Check required commands early for clearer failure
    log("Checking for required commands (op, age)...")
    try:
        run_command(["op", "--version"], capture_output=True, check=True)
        run_command(["age", "--version"], capture_output=True, check=True)
        log("Required commands found.")
    except SystemExit: # Catch exit from run_command failure
         log("Initialization check failed: Ensure 'op' and 'age' are installed and in PATH.")
         sys.exit(1) # Re-exit after logging specific message
    except Exception as e: # Catch unexpected errors during check
        log(f"Unexpected error during initialization check: {e}")
        sys.exit(1)

    main()
