# interactive only
[[ -o interactive ]] || return

# VS Code env-resolver fast path: skip heavy init
if [[ -n ${VSCODE_RESOLVING_ENVIRONMENT-} ]]; then
  return 0
fi

autoload -Uz add-zsh-hook
typeset -g _mise_applied=0

_mise_has_cfg() {
  local d=$PWD
  while [[ $d != / ]]; do
    [[ -e "$d/.mise.toml" || -e "$d/.tool-versions" || -e "$d/.rtx.toml" ]] && return 0
    d=${d:h}
  done
  return 1
}

_mise_apply() {
  command -v mise >/dev/null || return 0
  eval "$(mise hook-env -s zsh)"
  rehash
  _mise_applied=1
}

_mise_on_chpwd() {
  _mise_has_cfg || return 0
  _mise_applied=0
  _mise_apply
}

add-zsh-hook chpwd _mise_on_chpwd
_mise_on_chpwd

# completions (use a cache file; skip security scan if perms are clean)
ZSH_COMPDUMP="${XDG_CACHE_HOME:-$HOME/.cache}/zsh/zcompdump-${ZSH_VERSION}"
autoload -Uz compinit
mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/zsh"
compinit -C -d "$ZSH_COMPDUMP"
[[ -r "$ZSH_COMPDUMP" ]] && zcompile "$ZSH_COMPDUMP" 2>/dev/null

##### Interactive hooks / prompt / widgets
. "$HOME/.cargo/env" 2>/dev/null || true

source <(fzf --zsh)

if command -v jj >/dev/null; then
  _jjc="${XDG_CACHE_HOME:-$HOME/.cache}/zsh/jj_completion.zsh"
  mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/zsh"
  [[ -r $_jjc ]] || jj util completion zsh >| "$_jjc" 2>/dev/null
  source "$_jjc"
fi

##### Interactive-only PATH tweaks
export PATH="$HOME/.bin:$HOME/bin:/usr/local/bin:$PATH"

##### Homebrew tool paths using HOMEBREW_PREFIX
if [[ -n ${HOMEBREW_PREFIX-} ]]; then
    export PATH="${HOMEBREW_PREFIX}/opt/sqlite/bin:$PATH"
    export PATH="$PATH:${HOMEBREW_PREFIX}/opt/tidy-html5/bin"
    export PATH="${HOMEBREW_PREFIX}/opt/protobuf/bin:$PATH"
    export PATH="/opt/homebrew/opt/protobuf@3/bin:$PATH"
fi

##### Build flags
export LDFLAGS="-L/opt/homebrew/opt/libiconv/lib"
export CPPFLAGS="-I/opt/homebrew/opt/libiconv/include"

##### Secrets helpers
load_secret() {
    local secret_path=$1
    local var_name=$2
    export "$var_name"="$(op read --account my.1password.com "op://$secret_path")"
}

load_all_secrets() {
    eval "$(manage_secrets.py)"
    echo "All secrets have been loaded."
}

##### Aliases & helpers
alias ll='eza -lh --git'
alias ls="gls --color"
alias du="dust"
alias pmc='coyote test'
alias zstd=/opt/homebrew/opt/zstd/bin/zstd
alias vim=nvim
alias lg='GIT_CONFIG_GLOBAL=~/.gitconfig-lazygit lazygit'
alias ar=/usr/bin/ar

export _ZO_RESOLVE_SYMLINKS=1

##### Zellij helpers
zr  () { command zellij run --name "$*"        -- zsh -ic "$*"; }
zrf () { command zellij run --floating --name "$*" -- zsh -ic "$*"; }
zri () { command zellij run --in-place --name "$*" -- zsh -ic "$*"; }

eval "$(atuin init zsh)"

if command -v cursor-agent >/dev/null; then
  eval "$(cursor-agent shell-integration zsh)"
fi

command -v starship >/dev/null && eval "$(starship init zsh)"

##### ZLE keybindings (navigation & editing)
# 1) Choose ONE default keymap
bindkey -e         # Emacs-style (Ctrl-A/E, etc.)
# bindkey -v       # (or) Vi-style

# 2) Make the essentials work in BOTH emacs & vi-insert modes
for km in emacs viins; do
  bindkey -M $km '^A' beginning-of-line          # Ctrl-A → start
  bindkey -M $km '^E' end-of-line                # Ctrl-E → end
  bindkey -M $km '^K' kill-line                  # Ctrl-K → kill to end
  bindkey -M $km '^U' backward-kill-line         # Ctrl-U → kill to start
  bindkey -M $km '^W' backward-kill-word         # Ctrl-W → delete word left
  bindkey -M $km '^[d' kill-word                 # Alt-D → delete word right
  bindkey -M $km '^[b' backward-word             # Alt-B → move word left
  bindkey -M $km '^[f' forward-word              # Alt-F → move word right
  bindkey -M $km '^Y' yank                       # Ctrl-Y → paste/yank
  bindkey -M $km '^P' up-line-or-history         # Ctrl-P → prev history
  bindkey -M $km '^N' down-line-or-history       # Ctrl-N → next history
done

# Treat / . - _ as word boundaries so Alt-B/F hop nicely across paths
WORDCHARS='*?[]~=&;!#$%^(){}<>'

# Free Ctrl-S (some terminals use it for flow control)
stty -ixon 2>/dev/null || true

# Optional: make Home/End and Ctrl-←/→ work across common macOS terminals
bindkey '\e[H'  beginning-of-line
bindkey '\e[F'  end-of-line
bindkey '\eOH'  beginning-of-line
bindkey '\eOF'  end-of-line
bindkey '\e[1;5D' backward-word   # Ctrl-Left
bindkey '\e[1;5C' forward-word    # Ctrl-Right
bindkey '\e[5D'   backward-word   # some terms
bindkey '\e[5C'   forward-word    # some terms

# Optional: quick "edit current command in $EDITOR"
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M emacs '^X^E' edit-command-line
bindkey -M viins '^[e' edit-command-line
bindkey -M vicmd 'v'   edit-command-line
